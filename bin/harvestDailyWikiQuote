#!/usr/bin/env node

const admin = require('firebase-admin');
const scrapeIt = require('scrape-it');

let serviceAccount;
if (process.env.NODE_ENV = 'production') {
  serviceAccount = JSON.parse(process.env.SERVICE_ACCOUNT_JSON);
} else {
  serviceAccount = require('../keys/service-account-key.json');
}

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  databaseURL: 'https://quoteboard-34c0c.firebaseio.com'
});

const db = admin.database();

const _quoteEquals = (a, b) => {
  if (a !== b && (a === null || b === null)) return false;
  return a.text === b.text && a.author === b.author;
}

const _getAuthorPath = (author) => {
  return 'authors/' + author + '/quoteKeys';
}

class QuoteDb {
  static saveIfNew(quote) {
    return this._get(quote).then(existing => {
      if (existing) {
        console.log('Quote already saved.');
      } else {
        console.log('Quote hasn\'t been saved before. Saving now...');
        return this._save(quote);
      }
    });
  }

  static _save(quote) {
    return new Promise((resolve, reject) => {
      const db = admin.database();

      const quoteRef = db.ref('quotes').push();
      quoteRef.set(quote).then(() => {
        console.log('Saved the quote to the global quote list.');
        const keyRef = db.ref(_getAuthorPath(quote.author)).push();
        keyRef.set(quoteRef.key).then(() => {
          console.log('Saved the quote\'s key to author\'s quote key list.');
          resolve();
        });
      });
    });
  }

  static _get(quote) {
    console.log('Checking if quote exists.')
    return new Promise((resolve, reject) => {
      // Get the keys from all the quotes from this author.
      //   path: authors/<name>/quoteKeys
      const ref = db.ref(_getAuthorPath(quote.author));
      ref.once('value').then(keyRefs => {
        const numTotal = keyRefs.numChildren();
        if (numTotal === 0) {
          resolve(null);
        }
        let numChecked = 0;

        // For each quote key, check whether the corresponding quote is the same.
        //   path: quotes/<quote-key>
        keyRefs.forEach(keyRef => {
          db.ref('quotes/' + keyRef.val()).once('value').then(quoteRef => {
            if (_quoteEquals(quoteRef.val(), quote)) {
              resolve(quote);
            } else {
              numChecked++;
              if (numChecked === numTotal) {
                resolve(null);
              }
            }
          })
        });
      });
    });
  }
}


class Wikiquote {
  static getDailyQuote() {
    const options = {qotd: '#mf-qotd'};
    return scrapeIt('https://en.wikiquote.org', options).then(this._extractQuote);
  }

  static _extractQuote(page) {
    // The response is roughly something like:
    // { qotd: 'Quote of the day\n $QUOTE \n~ $AUTHOR ~\nThere is a page...' }
    const rawQuote = page.qotd.replace('Quote of the day', '');
    const parts = rawQuote.split('~').map(part => part.trim());
    const quote = {
      text: parts[0],
      author: parts[1]
    };

    console.log('Extracted quote:');
    console.log(quote);

    return quote;
  }
}


const run = () => {
  Wikiquote.getDailyQuote()
      .then(quote => QuoteDb.saveIfNew(quote))
      .catch(err => console.log(err))
      .then(() => process.exit())
}


run();
